============================================================================================================================================================
/analytics/dashboard
==========================
getDashboard(
            @Parameter(description = "Start date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @Parameter(description = "End date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
            @Parameter(description = "School ID filter") @RequestParam(required = false) Long schoolId,
            @Parameter(description = "Campus ID filter") @RequestParam(required = false) Long campusId,
            @Parameter(description = "Brand ID filter") @RequestParam(required = false) Long brandId,
            HttpServletRequest request)



============================================================================================================================================================
@RequestMapping("/pricing")
==========================

    @GetMapping("/school-pricing/school/{schoolId}")
    @Operation(summary = "Get all school pricings", description = "Get all pricing structures for a school")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "School pricings retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "School not found"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied")
    })
    public ResponseEntity<ApiResponse<List<SchoolPricingDto>>> getAllSchoolPricings(
            @Parameter(description = "School ID") @PathVariable Long schoolId,
            HttpServletRequest request) {

        log.debug("Get all pricings for school: {}", schoolId);

        List<SchoolPricingDto> pricings = pricingService.getAllSchoolPricings(schoolId, request);

        ApiResponse<List<SchoolPricingDto>> response = ApiResponse.success(pricings,
                "School pricings retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }


============================================================================================================================================================
@RequestMapping("/content")
==========================
    @GetMapping("/posts/school/{id}")
    @Operation(summary = "Get post by ID", description = "Get post details by ID")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Post retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "Post not found"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied")
    })
    public ResponseEntity<ApiResponse<PostDto>> getPostBySchoolId(
            @Parameter(description = "Post ID") @PathVariable Long id,
            HttpServletRequest request) {

        log.debug("Get post request: {}", id);

        PostDto postDto = contentService.getPostBySchoolId(id, request);

        ApiResponse<PostDto> response = ApiResponse.success(postDto, "Post retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }

    @GetMapping("/messages/school{id}")
    @Operation(summary = "Get message by ID", description = "Get message details by ID")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Message retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "Message not found"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied")
    })
    public ResponseEntity<ApiResponse<List<MessageDto>>> getMessageBySchoolId(
            @Parameter(description = "Message ID") @PathVariable Long id,
            HttpServletRequest request) {

        log.debug("Get message request: {}", id);

        List<MessageDto> messageDto = contentService.getMessageBySchoolId(id, request);

        ApiResponse<List<MessageDto>> response = ApiResponse.success(messageDto, "Message retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }


    @GetMapping("/galleries/school/{id}")
    @Operation(summary = "Get gallery by ID", description = "Get gallery details by ID")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Gallery retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "Gallery not found"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied")
    })
    public ResponseEntity<ApiResponse<List<GalleryDto>>> getGalleryBySchoolId(
            @Parameter(description = "School ID") @PathVariable Long id,
            HttpServletRequest request) {

        log.debug("Get gallery request: {}", id);

        List<GalleryDto> galleryDto = contentService.getGalleryBySchoolId(id, request);

        ApiResponse<List<GalleryDto>> response = ApiResponse.success(galleryDto, "Gallery retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }



============================================================================================================================================================
@RequestMapping("/campaigns")
==========================
 @GetMapping("/schools/{schoolId}")
    @Operation(summary = "Get campaigns by school", description = "Get all campaigns assigned to a specific school")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "School campaigns retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "School not found")
    })
    public ResponseEntity<ApiResponse<List<CampaignDto>>> getCampaignsBySchool(
            @Parameter(description = "School ID") @PathVariable Long schoolId,
            HttpServletRequest request) {

        log.debug("Get campaigns by school request: {}", schoolId);

        List<CampaignDto> campaigns = campaignService.getCampaignsBySchool(schoolId, request);

        ApiResponse<List<CampaignDto>> response = ApiResponse.success(campaigns, "School campaigns retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }





============================================================================================================================================================
@RequestMapping("/appointments")
==========================

    @GetMapping("/schools/{schoolId}/availability")
    @Operation(summary = "Get school availability", description = "Get appointment availability for a school on a specific date")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Availability retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "School not found")
    })
    public ResponseEntity<ApiResponse<AppointmentAvailabilityDto>> getSchoolAvailability(
            @Parameter(description = "School ID") @PathVariable Long schoolId,
            @Parameter(description = "Date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
            @Parameter(description = "School name") @RequestParam(required = false) String schoolName,
            HttpServletRequest request) {

        log.debug("Get school availability request: {} for date: {}", schoolId, date);

        AppointmentAvailabilityDto availability = appointmentService.getAvailabilityForDate(schoolId, schoolName, date);

        ApiResponse<AppointmentAvailabilityDto> response = ApiResponse.success(availability, "Availability retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }

    @GetMapping("/schools/{schoolId}/availability-range")
    @Operation(summary = "Get school availability range", description = "Get appointment availability for a school across a date range")
    @ApiResponses(value = {
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Availability range retrieved successfully"),
            @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "School not found")
    })
    public ResponseEntity<ApiResponse<List<AppointmentAvailabilityDto>>> getSchoolAvailabilityRange(
            @Parameter(description = "School ID") @PathVariable Long schoolId,
            @Parameter(description = "Start date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @Parameter(description = "End date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
            @Parameter(description = "School name") @RequestParam(required = false) String schoolName,
            HttpServletRequest request) {

        log.debug("Get school availability range request: {} from {} to {}", schoolId, startDate, endDate);

        List<AppointmentAvailabilityDto> availability = appointmentService.getAvailabilityBetweenDates(schoolId, schoolName, startDate, endDate);

        ApiResponse<List<AppointmentAvailabilityDto>> response = ApiResponse.success(availability, "Availability range retrieved successfully");
        response.setPath(request.getRequestURI());
        response.setTimestamp(LocalDateTime.now());

        return ResponseEntity.ok(response);
    }
     @GetMapping("/schools/{schoolId}/statistics")
        @Operation(summary = "Get appointment statistics", description = "Get appointment statistics for a school")
        @ApiResponses(value = {
                @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Statistics retrieved successfully"),
                @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied"),
                @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "School not found")
        })
        public ResponseEntity<ApiResponse<AppointmentStatisticsDto>> getAppointmentStatistics(
                @Parameter(description = "School ID") @PathVariable Long schoolId,
                @Parameter(description = "Period start date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate periodStart,
                @Parameter(description = "Period end date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate periodEnd,
                HttpServletRequest request) {

            log.debug("Get appointment statistics request for school: {}", schoolId);

            AppointmentStatisticsDto statistics = appointmentService.getAppointmentStatistics(schoolId, periodStart, periodEnd, request);

            ApiResponse<AppointmentStatisticsDto> response = ApiResponse.success(statistics, "Statistics retrieved successfully");
            response.setPath(request.getRequestURI());
            response.setTimestamp(LocalDateTime.now());

            return ResponseEntity.ok(response);
        }

         @GetMapping("/schools/{schoolId}/statistics")
            @Operation(summary = "Get appointment statistics", description = "Get appointment statistics for a school")
            @ApiResponses(value = {
                    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "200", description = "Statistics retrieved successfully"),
                    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "403", description = "Access denied"),
                    @io.swagger.v3.oas.annotations.responses.ApiResponse(responseCode = "404", description = "School not found")
            })
            public ResponseEntity<ApiResponse<AppointmentStatisticsDto>> getAppointmentStatistics(
                    @Parameter(description = "School ID") @PathVariable Long schoolId,
                    @Parameter(description = "Period start date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate periodStart,
                    @Parameter(description = "Period end date (YYYY-MM-DD)") @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate periodEnd,
                    HttpServletRequest request) {

                log.debug("Get appointment statistics request for school: {}", schoolId);

                AppointmentStatisticsDto statistics = appointmentService.getAppointmentStatistics(schoolId, periodStart, periodEnd, request);

                ApiResponse<AppointmentStatisticsDto> response = ApiResponse.success(statistics, "Statistics retrieved successfully");
                response.setPath(request.getRequestURI());
                response.setTimestamp(LocalDateTime.now());

                return ResponseEntity.ok(response);
            }