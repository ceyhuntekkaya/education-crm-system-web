"use client";

import React, { useState } from "react";
import { FileInput } from "@/components/file-input";

export default function FileInputExample() {
  // Ã‡oklu yÃ¼kleme
  const [imageFiles, setImageFiles] = useState<File[] | File | null>(null);
  const [videoFiles, setVideoFiles] = useState<File[] | File | null>(null);
  const [documentFiles, setDocumentFiles] = useState<File[] | File | null>(
    null
  );

  // TÃ¼m dosya tÃ¼rleri iÃ§in (mixed content)
  const [allFiles, setAllFiles] = useState<File[] | File | null>(null);

  // Tekli yÃ¼kleme
  const [singleImage, setSingleImage] = useState<File[] | File | null>(null);
  const [singleVideo, setSingleVideo] = useState<File[] | File | null>(null);
  const [singleDocument, setSingleDocument] = useState<File[] | File | null>(
    null
  );

  const [error, setError] = useState<string>("");
  const [isUploading, setIsUploading] = useState<string | null>(null);

  const handleSubmit = async () => {
    console.log("Image Files (Multiple):", imageFiles);
    console.log("Video Files (Multiple):", videoFiles);
    console.log("Document Files (Multiple):", documentFiles);
    console.log("All Files (Mixed Content):", allFiles);
    console.log("Single Image:", singleImage);
    console.log("Single Video:", singleVideo);
    console.log("Single Document:", singleDocument);

    // SimÃ¼le edilmiÅŸ yÃ¼kleme iÅŸlemi
    setIsUploading("upload");
    try {
      await new Promise((resolve) => setTimeout(resolve, 3000)); // 3 saniye bekle
      console.log("Dosyalar baÅŸarÄ±yla yÃ¼klendi!");
    } catch (error) {
      console.error("YÃ¼kleme hatasÄ±:", error);
    } finally {
      setIsUploading(null);
    }
  };

  // Upload handlers
  const handleImageUpload = async (files: File[]) => {
    console.log("Resimler yÃ¼kleniyor:", files);
    // SimÃ¼le edilmiÅŸ API Ã§aÄŸrÄ±sÄ±
    await new Promise(resolve => setTimeout(resolve, 2000));
    console.log("Resimler baÅŸarÄ±yla yÃ¼klendi!");
  };

  const handleVideoUpload = async (files: File[]) => {
    console.log("Videolar yÃ¼kleniyor:", files);
    await new Promise(resolve => setTimeout(resolve, 3000));
    console.log("Videolar baÅŸarÄ±yla yÃ¼klendi!");
  };

  const handleDocumentUpload = async (files: File[]) => {
    console.log("DÃ¶kÃ¼manlar yÃ¼kleniyor:", files);
    await new Promise(resolve => setTimeout(resolve, 1500));
    console.log("DÃ¶kÃ¼manlar baÅŸarÄ±yla yÃ¼klendi!");
  };

  const handleUploadProgress = (progress: number) => {
    console.log(`Upload progress: ${progress}%`);
  };

  const handleUploadComplete = (uploadedFiles: File[]) => {
    console.log("Upload tamamlandÄ±:", uploadedFiles);
  };

  // Loading durumu deÄŸiÅŸikliÄŸini handle et
  const handleLoadingChange = (loading: boolean, type: string) => {
    if (loading) {
      setIsUploading(type);
    } else {
      setIsUploading(null);
    }
  };

  return (
    <div className="container py-5 mt-32">
      <div className="row justify-content-center">
        <div className="col-lg-8">
          <div className="bg-white rounded-12 p-4 shadow-sm">
            <h2 className="h4 mb-4">File Input Component</h2>

            <div className="row g-4">
              {/* Resim YÃ¼kleme */}
              <div className="col-12">
                <FileInput
                  value={imageFiles}
                  onChange={setImageFiles}
                  onError={setError}
                  onLoadingChange={(loading) =>
                    handleLoadingChange(loading, "images")
                  }
                  onUpload={handleImageUpload}
                  onUploadProgress={handleUploadProgress}
                  onUploadComplete={handleUploadComplete}
                  label="Resim YÃ¼kle (Upload Button Ä°le)"
                  type="img"
                  multiple={true}
                  maxFiles={3}
                  maxSize={5}
                  variant="inline"
                  placeholder="Resimlerinizi buraya yÃ¼kleyin"
                  showUploadButton={true}
                  uploadButtonText="Resimleri YÃ¼kle"
                  error={error}
                />
              </div>

              {/* Video YÃ¼kleme (Ã‡oklu) */}
              <div className="col-12">
                <FileInput
                  value={videoFiles}
                  onChange={setVideoFiles}
                  onLoadingChange={(loading) =>
                    handleLoadingChange(loading, "videos")
                  }
                  onUpload={handleVideoUpload}
                  onUploadProgress={handleUploadProgress}
                  onUploadComplete={handleUploadComplete}
                  label="Video YÃ¼kle (Ã‡oklu - Upload Button Ä°le)"
                  type="video"
                  multiple={true}
                  maxFiles={3}
                  maxSize={50}
                  variant="outline"
                  placeholder="Video dosyalarÄ±nÄ±zÄ± seÃ§in"
                  showUploadButton={true}
                  uploadButtonText="VideolarÄ± YÃ¼kle"
                />
              </div>

              {/* DokÃ¼man YÃ¼kleme */}
              <div className="col-12">
                <FileInput
                  value={documentFiles}
                  onChange={setDocumentFiles}
                  onLoadingChange={(loading) =>
                    handleLoadingChange(loading, "documents")
                  }
                  onUpload={handleDocumentUpload}
                  onUploadProgress={handleUploadProgress}
                  onUploadComplete={handleUploadComplete}
                  label="DokÃ¼man YÃ¼kle (PDF, DOC, TXT - Upload Button Ä°le)"
                  type="file"
                  multiple={true}
                  maxFiles={5}
                  maxSize={10}
                  required={true}
                  placeholder="PDF, DOC, TXT dosyalarÄ±nÄ± yÃ¼kleyin"
                  showUploadButton={true}
                  uploadButtonText="DÃ¶kÃ¼manlarÄ± YÃ¼kle"
                />
              </div>

              {/* TÃ¼m Dosya TÃ¼rleri - Gruplama ile */}
              <div className="col-12">
                <FileInput
                  value={allFiles}
                  onChange={setAllFiles}
                  onLoadingChange={(loading) =>
                    handleLoadingChange(loading, "all")
                  }
                  label="TÃ¼m Dosya TÃ¼rleri (KarÄ±ÅŸÄ±k Ä°Ã§erik - GruplandÄ±rmalÄ±)"
                  type="all"
                  multiple={true}
                  maxFiles={15}
                  maxSize={25}
                  variant="outline"
                  placeholder="Resim, video, dokÃ¼man - her tÃ¼rlÃ¼ dosyayÄ± yÃ¼kleyin. Ã‡oklu dosya seÃ§imi yapabilirsiniz."
                  error={error}
                />
                <div className="mt-12">
                  <small className="text-neutral-600 fst-italic">
                    ðŸ’¡ Bu Ã¶rnekte farklÄ± dosya tÃ¼rlerini aynÄ± anda
                    yÃ¼klediÄŸinizde otomatik olarak gruplandÄ±rÄ±lacak ve hizalÄ±
                    ÅŸekilde gÃ¶sterilecektir.
                  </small>
                </div>
              </div>

              {/* AyÄ±rÄ±cÄ± */}
              <div className="col-12">
                <hr className="my-4" />
                <h3 className="h5 mb-3 text-neutral-700">
                  Tekli YÃ¼kleme Ã–rnekleri
                </h3>
              </div>

              {/* Tekli Resim YÃ¼kleme */}
              <div className="col-md-6">
                <FileInput
                  value={singleImage}
                  onChange={setSingleImage}
                  label="Tek Resim YÃ¼kle"
                  type="img"
                  multiple={false}
                  maxSize={5}
                  variant="outline"
                  placeholder="Bir resim seÃ§in"
                />
              </div>

              {/* Tekli Video YÃ¼kleme */}
              <div className="col-md-6">
                <FileInput
                  value={singleVideo}
                  onChange={setSingleVideo}
                  label="Tek Video YÃ¼kle"
                  type="video"
                  multiple={false}
                  maxSize={100}
                  variant="inline"
                  placeholder="Bir video seÃ§in"
                />
              </div>

              {/* Tekli DokÃ¼man YÃ¼kleme */}
              <div className="col-12">
                <FileInput
                  value={singleDocument}
                  onChange={setSingleDocument}
                  label="Tek DokÃ¼man YÃ¼kle (PDF, DOC, TXT)"
                  type="file"
                  multiple={false}
                  maxSize={20}
                  variant="outline"
                  placeholder="Bir dokÃ¼man seÃ§in"
                  required={false}
                />
              </div>

              {/* Durum GÃ¶sterimi */}
              <div className="col-12">
                <div className="bg-neutral-50 p-3 rounded-8">
                  <h6 className="mb-3">YÃ¼klenen Dosyalar:</h6>
                  <div className="row g-3">
                    <div className="col-md-6">
                      <div className="small text-neutral-600">
                        <div className="fw-medium mb-2">Ã‡oklu YÃ¼kleme:</div>
                        <div>
                          Resimler:{" "}
                          {Array.isArray(imageFiles)
                            ? imageFiles.length
                            : imageFiles
                            ? 1
                            : 0}{" "}
                          dosya
                        </div>
                        <div>
                          Videolar:{" "}
                          {Array.isArray(videoFiles)
                            ? videoFiles.length
                            : videoFiles
                            ? 1
                            : 0}{" "}
                          dosya
                        </div>
                        <div>
                          DokÃ¼manlar:{" "}
                          {Array.isArray(documentFiles)
                            ? documentFiles.length
                            : documentFiles
                            ? 1
                            : 0}{" "}
                          dosya
                        </div>
                      </div>
                    </div>
                    <div className="col-md-6">
                      <div className="small text-neutral-600">
                        <div className="fw-medium mb-2">Tekli YÃ¼kleme:</div>
                        <div>Tek Resim: {singleImage ? 1 : 0} dosya</div>
                        <div>Tek Video: {singleVideo ? 1 : 0} dosya</div>
                        <div>Tek DokÃ¼man: {singleDocument ? 1 : 0} dosya</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Loading Durumu */}
              {isUploading && (
                <div className="col-12">
                  <div className="alert alert-info">
                    <strong>
                      {isUploading === "upload"
                        ? "Dosyalar sunucuya yÃ¼kleniyor..."
                        : `${isUploading} iÅŸleniyor...`}
                    </strong>
                  </div>
                </div>
              )}

              {/* Submit Butonu */}
              <div className="col-12">
                <button
                  type="button"
                  onClick={handleSubmit}
                  disabled={!!isUploading}
                  className="btn btn-main-600 text-white px-4 py-2 rounded-8"
                >
                  {isUploading === "upload"
                    ? "YÃ¼kleniyor..."
                    : "DosyalarÄ± GÃ¶nder"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
